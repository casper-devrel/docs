"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[6562],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>y});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),l=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),d=l(a),u=r,y=d["".concat(s,".").concat(u)]||d[u]||h[u]||o;return a?n.createElement(y,i(i({ref:t},c),{},{components:a})):n.createElement(y,i({ref:t},c))}));function y(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=u;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p[d]="string"==typeof e?e:r,i[1]=p;for(var l=2;l<o;l++)i[l]=a[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},97359:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>p,toc:()=>l});var n=a(87462),r=(a(67294),a(3905));const o={},i="Signing Deploys",p={unversionedId:"developers/dapps/signing-a-deploy",id:"version-1.5.6/developers/dapps/signing-a-deploy",title:"Signing Deploys",description:"When creating a Deploy to be executed on a Casper network, the account owner, or more accurately, enough authorized signers must sign the deploy using their account's cryptographic key-pair. This key-pair is a combination of the account's secret and public keys. The signatures attached to the Deploy allow the network to verify that it should be executed.",source:"@site/versioned_docs/version-1.5.6/developers/dapps/signing-a-deploy.md",sourceDirName:"developers/dapps",slug:"/developers/dapps/signing-a-deploy",permalink:"/developers/dapps/signing-a-deploy",draft:!1,editUrl:"https://github.com/casper-network/docs/tree/dev/source/version-1.5.6/developers/dapps/signing-a-deploy.md",tags:[],version:"1.5.6",lastUpdatedAt:1719863791,formattedLastUpdatedAt:"Jul 1, 2024",frontMatter:{},sidebar:"developers",previous:{title:"URef Access Rights",permalink:"/developers/dapps/uref-security"},next:{title:"Estimating Gas Costs with Speculative Execution",permalink:"/developers/dapps/speculative-exec"}},s={},l=[{value:"Public Key Cryptography",id:"public-key-cryptography",level:2}],c={toc:l},d="wrapper";function h(e){let{components:t,...a}=e;return(0,r.kt)(d,(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"signing-deploys"},"Signing Deploys"),(0,r.kt)("p",null,"When creating a ",(0,r.kt)("a",{parentName:"p",href:"/concepts/serialization-standard#serialization-standard-deploy"},(0,r.kt)("inlineCode",{parentName:"a"},"Deploy"))," to be executed on a Casper network, the account owner, or more accurately, enough authorized signers must sign the deploy using their account's cryptographic key-pair. This key-pair is a combination of the account's secret and public keys. The signatures attached to the Deploy allow the network to verify that it should be executed."),(0,r.kt)("p",null,"When a signature is attached to a deploy, it is paired with the public key of the signer, and referred to as an ",(0,r.kt)("a",{parentName:"p",href:"/concepts/serialization-standard#approval"},(0,r.kt)("inlineCode",{parentName:"a"},"Approval")),".  Every valid deploy has at least one approval."),(0,r.kt)("p",null,"The signature creation process begins with the hashing of the payment and session of the deploy to create the ",(0,r.kt)("inlineCode",{parentName:"p"},"BodyHash"),". The ",(0,r.kt)("inlineCode",{parentName:"p"},"BodyHash")," becomes a component of the ",(0,r.kt)("a",{parentName:"p",href:"/concepts/serialization-standard#deploy-header"},(0,r.kt)("inlineCode",{parentName:"a"},"DeployHeader"))," as outlined in the serialization standard. From there, the ",(0,r.kt)("inlineCode",{parentName:"p"},"DeployHeader")," can be hashed to create the ",(0,r.kt)("a",{parentName:"p",href:"/concepts/serialization-standard#deploy-hash"},(0,r.kt)("inlineCode",{parentName:"a"},"DeployHash")),". As outlined above, the ",(0,r.kt)("inlineCode",{parentName:"p"},"DeployHash")," is then combined with the account's key-pair to create the deploy's signature."),(0,r.kt)("p",null,"As the ",(0,r.kt)("inlineCode",{parentName:"p"},"DeployHash")," contains a hash of the deploy's body within, any variation to any aspect of the deploy or sending account's keys would render the ",(0,r.kt)("inlineCode",{parentName:"p"},"DeployHash")," invalid."),(0,r.kt)("h2",{id:"public-key-cryptography"},"Public Key Cryptography"),(0,r.kt)("p",null,"Casper networks are compatible with both ",(0,r.kt)("inlineCode",{parentName:"p"},"Ed25519")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Secp256k1")," public key cryptography. When ",(0,r.kt)("a",{parentName:"p",href:"/concepts/serialization-standard"},"serialized"),", public keys and signatures are prefixed with a single byte, used as a tag to denote the applicable algorithm. Ed25519 public keys and signatures are prefixed with ",(0,r.kt)("inlineCode",{parentName:"p"},"1"),", whereas Secp256k1 are prefixed with ",(0,r.kt)("inlineCode",{parentName:"p"},"2"),"."),(0,r.kt)("p",null,"Casper uses ",(0,r.kt)("inlineCode",{parentName:"p"},"blake2b")," hashing within our ",(0,r.kt)("a",{parentName:"p",href:"/concepts/serialization-standard"},"serialization"),". However, these hashed values will be hashed once again when they are signed over. The type of hashing depends on the associated keypair algorithm as follows:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Ed25519 signs over a SHA-512 digest.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Secp256k1 signs over a SHA-256 digest."))))}h.isMDXComponent=!0}}]);