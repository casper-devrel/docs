"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[3433],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>b});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var d=a.createContext({}),c=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},l=function(e){var t=c(e.components);return a.createElement(d.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,d=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=c(n),h=i,b=p["".concat(d,".").concat(h)]||p[h]||u[h]||o;return n?a.createElement(b,r(r({ref:t},l),{},{components:n})):a.createElement(b,r({ref:t},l))}));function b(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=h;var s={};for(var d in t)hasOwnProperty.call(t,d)&&(s[d]=t[d]);s.originalType=e,s[p]="string"==typeof e?e:i,r[1]=s;for(var c=2;c<o;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},98375:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=n(87462),i=(n(67294),n(3905));const o={title:"Bonding"},r="Bonding as a Validator",s={unversionedId:"operators/becoming-a-validator/bonding",id:"operators/becoming-a-validator/bonding",title:"Bonding",description:"It is recommended that a bonding request be sent once the node has completed the synchronization process. In a Casper network, bonding takes place through the auction contract via the add_bid.wasm contract. The auction runs for a future era, every era. The chainspec.toml specifies the number of slots available, and the auction will take the top N slots and create the validator set for the future era.",source:"@site/source/docs/operators/becoming-a-validator/bonding.md",sourceDirName:"operators/becoming-a-validator",slug:"/operators/becoming-a-validator/bonding",permalink:"/docs/next/operators/becoming-a-validator/bonding",draft:!1,editUrl:"https://github.com/casper-network/docs/tree/dev/source/docs/operators/becoming-a-validator/bonding.md",tags:[],version:"current",lastUpdatedAt:1719861245,formattedLastUpdatedAt:"Jul 1, 2024",frontMatter:{title:"Bonding"},sidebar:"operators",previous:{title:"Becoming a Validator",permalink:"/docs/next/operators/becoming-a-validator/"},next:{title:"Unbonding",permalink:"/docs/next/operators/becoming-a-validator/unbonding"}},d={},c=[{value:"Method 1: Bonding with the System Auction Contract",id:"bonding-system-auction",level:2},{value:"Method 2: Bonding with Compiled Wasm",id:"bonding-compiled-wasm",level:2},{value:"Checking the Bid Status",id:"check-the-status-of-the-bid-in-the-auction",level:2},{value:"A Losing Bid",id:"losing-bid",level:2},{value:"Avoiding Ejection",id:"avoiding-ejection",level:2},{value:"Withdrawing a Bid",id:"withdrawing-a-bid",level:2}],l={toc:c},p="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"bonding-as-a-validator"},"Bonding as a Validator"),(0,i.kt)("p",null,"It is recommended that a bonding request be sent once the node has completed the synchronization process. In a Casper network, bonding takes place through the auction contract via the ",(0,i.kt)("inlineCode",{parentName:"p"},"add_bid.wasm")," contract. The auction runs for a future era, every era. The ",(0,i.kt)("inlineCode",{parentName:"p"},"chainspec.toml")," specifies the number of slots available, and the auction will take the top N slots and create the validator set for the future era. "),(0,i.kt)("p",null,"In the Testnet, era durations are approximately two hours. The entire process takes approximately 3 eras. Therefore, ",(0,i.kt)("strong",{parentName:"p"},"the time for bid submission to inclusion in the validator set is a minimum of six hours"),". Bonding requests (bids) are transactions like any other. Because they are generic transactions, they are more resistant to censorship."),(0,i.kt)("h2",{id:"bonding-system-auction"},"Method 1: Bonding with the System Auction Contract"),(0,i.kt)("p",null,"This method submits a bid using the system auction contract. Call the existing ",(0,i.kt)("inlineCode",{parentName:"p"},"add_bid")," entry point from the system auction contract. Using this method, you do not need to build any contracts, reducing costs and complexity."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"sudo -u casper casper-client put-deploy \\\n--node-address <HOST:PORT> \\\n--secret-key <PATH> \\\n--chain-name <CHAIN_NAME> \\\n--payment-amount <PAYMENT_AMOUNT_IN_MOTES> \\\n--session-hash <SESSION_HASH> \\\n--session-entry-point add_bid \\\n--session-arg=\"public_key:public_key='<PUBLIC_KEY_HEX>'\" \\\n--session-arg=\"amount:u512='<BID_AMOUNT>'\" \\\n--session-arg=\"delegation_rate:u8='<PERCENT_TO_KEEP_FROM_DELEGATORS>'\"\n")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"node-address")," - An IP address of a peer on the network. The default port of nodes' JSON-RPC servers on Mainnet and Testnet is 7777"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"secret-key")," - The file name containing the secret key of the account paying for the Deploy"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"chain-name")," - The chain-name to the network where you wish to send the Deploy. For Mainnet, use ",(0,i.kt)("em",{parentName:"li"},"casper"),". For Testnet, use ",(0,i.kt)("em",{parentName:"li"},"casper-test")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"payment-amount")," - The payment for the Deploy in motes. This entry point call needs 2.5 CSPR for node version ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/casper-network/casper-node/blob/release-1.5.1/resources/production/chainspec.toml"},"1.5.1")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"session-hash")," - Hex-encoded hash of the stored auction contract, which depends on the network you are using. For Casper's Mainnet and Testnet, the hashes are as follows:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Testnet"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"hash-93d923e336b20a4c4ca14d592b60e5bd3fe330775618290104f9beb326db7ae2")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Mainnet"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"hash-ccb576d6ce6dec84a551e48f0d0b7af89ddba44c7390b690036257a04a3ae9ea"))),(0,i.kt)("ol",{start:6},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"session-entry-point")," - Name of the entrypoint that will be used when calling the contract")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"add_bid")," entry point expects three arguments:"),(0,i.kt)("ol",{start:7},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"public key"),": The hexadecimal public key of the account's purse submitting the bid. This key must match the secret key that signs the bid"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"amount"),": The bidding amount"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"delegation_rate"),": Percentage of the rewards that the node operator retains for their services")),(0,i.kt)("p",null,"The command will return a deploy hash, which is needed to verify the deploy's processing results."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Calling the ",(0,i.kt)("inlineCode",{parentName:"p"},"add_bid")," entry point on the auction contract has a fixed cost of 2.5 CSPR.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example:")),(0,i.kt)("p",null,"This example command uses the Casper Testnet to bid 10,000 CSPR for a validating slot:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"sudo -u casper casper-client put-deploy \\\n--node-address http://65.21.75.254:7777 \\\n--chain-name casper-test \\\n--secret-key /etc/casper/validator_keys/secret_key.pem \\\n--payment-amount 2500000000 \\\n--session-hash hash-93d923e336b20a4c4ca14d592b60e5bd3fe330775618290104f9beb326db7ae2 \\\n--session-entry-point add_bid \\\n--session-arg \"public_key:public_key='01c297d2931fec7e22b2fb1ae3ca5afdfacc2c82ba501e8ed158eecef82b4dcdee'\" \\\n--session-arg \"amount:U512='$[10000 * 1000000000]'\" \\\n--session-arg=\"delegation_rate:u8='10'\"\n")),(0,i.kt)("p",null,"Next, ",(0,i.kt)("a",{parentName:"p",href:"#check-the-status-of-the-bid-in-the-auction"},"check the status of the auction")," to see if you have won a validator slot."),(0,i.kt)("h2",{id:"bonding-compiled-wasm"},"Method 2: Bonding with Compiled Wasm"),(0,i.kt)("p",null,"Another way to send a bonding transaction to the network is via a deploy containing the compiled ",(0,i.kt)("inlineCode",{parentName:"p"},"add_bid.wasm"),". For details, refer to ",(0,i.kt)("a",{parentName:"p",href:"/docs/next/operators/setup/joining#step-3-build-contracts"},"Building the Required Contracts"),"."),(0,i.kt)("p",null,"The following deploy is a template for sending a bonding request:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"sudo -u casper casper-client put-deploy \\\n--node-address http://<HOST:PORT> \\\n--secret-key /etc/casper/validator_keys/secret_key.pem \\\n--chain-name <CHAIN_NAME> \\\n--payment-amount <PAYMENT_AMOUNT> \\\n--session-path $HOME/casper-node/target/wasm32-unknown-unknown/release/add_bid.wasm \\\n--session-arg=\"public_key:public_key='<PUBLIC_KEY_HEX>'\" \\\n--session-arg=\"amount:u512='<BID-AMOUNT>'\" \\\n--session-arg=\"delegation_rate:u8='<PERCENT_TO_KEEP_FROM_DELEGATORS>'\"\n")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"node-address")," - An IP address of a peer on the network. The default port of nodes' JSON-RPC servers on Mainnet and Testnet is 7777"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"secret-key")," - The file name containing the secret key of the account paying for the Deploy"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"chain-name")," - The chain-name to the network where you wish to send the Deploy. For Mainnet, use ",(0,i.kt)("em",{parentName:"li"},"casper"),". For Testnet, use ",(0,i.kt)("em",{parentName:"li"},"casper-test")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"payment-amount")," - The payment for the Deploy in motes"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"session-path")," - The path to the compiled Wasm on your computer")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"add_bid.wasm")," expects three arguments:"),(0,i.kt)("ol",{start:7},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"public_key"),": The hexadecimal public key of the account's purse submitting the bid. This key must match the secret key that signs the bid"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"amount"),": The bidding amount"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"delegation_rate"),": Percentage of the rewards that the node operator retains for their services")),(0,i.kt)("p",null,"The command will return a deploy hash, which is needed to verify the deploy's processing results."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"This method is more expensive than calling the ",(0,i.kt)("inlineCode",{parentName:"p"},"add_bid")," entrypoint in the system auction contract, which has a fixed cost of 2.5 CSPR.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example:")),(0,i.kt)("p",null,"Here is an example request to bond using the ",(0,i.kt)("inlineCode",{parentName:"p"},"add_bid.wasm"),". The payment amount specified is 3 CSPR. You must modify the payment and other values in the deploy based on the network's ",(0,i.kt)("a",{parentName:"p",href:"/docs/next/concepts/glossary/C#chainspec"},"chainspec.toml"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"sudo -u casper casper-client put-deploy \\\n--node-address http://65.21.235.219:7777 \\\n--secret-key /etc/casper/validator_keys/secret_key.pem \\\n--chain-name casper-test \\\n--payment-amount 3000000000 \\\n--session-path ~/casper-node/target/wasm32-unknown-unknown/release/add_bid.wasm \\\n--session-arg \"public_key:public_key='01c297d2931fec7e22b2fb1ae3ca5afdfacc2c82ba501e8ed158eecef82b4dcdee'\" \\\n--session-arg \"amount:U512='$[10000 * 1000000000]'\" \\\n--session-arg=\"delegation_rate:u8='10'\"\n")),(0,i.kt)("p",null,"Next, check the bid status to see if you have won a validator slot."),(0,i.kt)("h2",{id:"check-the-status-of-the-bid-in-the-auction"},"Checking the Bid Status"),(0,i.kt)("p",null,"Since the bid was submitted using a deploy like any other, perform ",(0,i.kt)("inlineCode",{parentName:"p"},"get-deploy")," using the ",(0,i.kt)("inlineCode",{parentName:"p"},"casper-client"),", to see the execution status."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"casper-client get-deploy --node-address http://<HOST:PORT> <DEPLOY_HASH>\n")),(0,i.kt)("p",null,"If the bid wins the auction, the public key and associated bonded amount will appear in the auction contract as part of the validator set for a future era. To determine if the bid was accepted, query the auction contract:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"casper-client get-auction-info --node-address http://<HOST:PORT>\n")),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Example auction info response"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'{\n"jsonrpc": "2.0",\n"result": {\n "bids": [\n   {\n     "bid": {\n       "bonding_purse": "uref-488a0bbc3c3729f5696965da7a3aeee83805392944e36157909da273255fdb85-007",\n       "delegation_rate": 0,\n       "delegators": [],\n       "release_era": null,\n       "reward": "93328432442428418861229954179737",\n       "staked_amount": "10000000000000000"\n     },\n     "public_key": "013f774a58f4d40bd9b6cce7e306e53646913860ef2a111d00f0fe7794010c4012"\n   },\n   {\n     "bid": {\n       "bonding_purse": "uref-14e128b099b0c3680100520226e6999b322989586cc22db0630db5ec1329f0a7-007",\n       "delegation_rate": 10,\n       "delegators": [],\n       "release_era": null,\n       "reward": "0",\n       "staked_amount": "9000000000000000"\n     },\n     "public_key": "01405133e73ef2946fe3a2d76a4c75d305a04ad6b969f3c4a8a0d27235eb260f87"\n   },\n   {\n     "bid": {\n       "bonding_purse": "uref-6c0bf8cee1c0749dd9766376910867a84b2e826eaf6c118fcb0224c7d8d229dd-007",\n       "delegation_rate": 10,\n       "delegators": [],\n       "release_era": null,\n       "reward": "266185120443441810685787",\n       "staked_amount": "100000000"\n     },\n     "public_key": "01524a5f3567d7b5ea17ca518c9d0320fb4a75a28a5eab58d06c755c388f20a19f"\n   },\n   {\n     "bid": {\n       "bonding_purse": "uref-3880b3daf95f962f57e6a4b1589564abf7deef58a1fb0753d1108316bba7b3d7-007",\n       "delegation_rate": 10,\n       "delegators": [],\n       "release_era": null,\n       "reward": "0",\n       "staked_amount": "9000000000000000"\n     },\n     "public_key": "01a6901408eda702a653805f50060bfe00d5e962747ee7133df64bd7bab50b4643"\n   },\n   {\n     "bid": {\n       "bonding_purse": "uref-5a777c9cd53456b49eecf25dcc13e12ddff4106175a69f8e24a7c9a4c135df0d-007",\n       "delegation_rate": 0,\n       "delegators": [],\n       "release_era": null,\n       "reward": "93328432442428418861229954179737",\n       "staked_amount": "10000000000000000"\n     },\n     "public_key": "01d62fc9b894218bfbe8eebcc4a28a1fc4cb3a5c6120bb0027207ba8214439929e"\n   }\n ],\n "block_height": 318,\n "era_validators": [\n   {\n     "era_id": 20,\n     "validator_weights": [\n       {\n         "public_key": "013f774a58f4d40bd9b6cce7e306e53646913860ef2a111d00f0fe7794010c4012",\n         "weight": "10000000000000000"\n       },\n       {\n         "public_key": "01405133e73ef2946fe3a2d76a4c75d305a04ad6b969f3c4a8a0d27235eb260f87",\n         "weight": "9000000000000000"\n       },\n       {\n         "public_key": "01524a5f3567d7b5ea17ca518c9d0320fb4a75a28a5eab58d06c755c388f20a19f",\n         "weight": "100000000"\n       },\n       {\n         "public_key": "01a6901408eda702a653805f50060bfe00d5e962747ee7133df64bd7bab50b4643",\n         "weight": "9000000000000000"\n       },\n       {\n         "public_key": "01d62fc9b894218bfbe8eebcc4a28a1fc4cb3a5c6120bb0027207ba8214439929e",\n         "weight": "10000000000000000"\n       }\n     ]\n   },\n   {\n     "era_id": 21,\n     "validator_weights": [\n       {\n         "public_key": "013f774a58f4d40bd9b6cce7e306e53646913860ef2a111d00f0fe7794010c4012",\n         "weight": "10000000000000000"\n       },\n       {\n         "public_key": "01405133e73ef2946fe3a2d76a4c75d305a04ad6b969f3c4a8a0d27235eb260f87",\n         "weight": "9000000000000000"\n       },\n       {\n         "public_key": "01524a5f3567d7b5ea17ca518c9d0320fb4a75a28a5eab58d06c755c388f20a19f",\n         "weight": "100000000"\n       },\n       {\n         "public_key": "01a6901408eda702a653805f50060bfe00d5e962747ee7133df64bd7bab50b4643",\n         "weight": "9000000000000000"\n       },\n       {\n         "public_key": "01d62fc9b894218bfbe8eebcc4a28a1fc4cb3a5c6120bb0027207ba8214439929e",\n         "weight": "10000000000000000"\n       }\n     ]\n   },\n   {\n     "era_id": 22,\n     "validator_weights": [\n       {\n         "public_key": "013f774a58f4d40bd9b6cce7e306e53646913860ef2a111d00f0fe7794010c4012",\n         "weight": "10000000000000000"\n       },\n       {\n         "public_key": "01405133e73ef2946fe3a2d76a4c75d305a04ad6b969f3c4a8a0d27235eb260f87",\n         "weight": "9000000000000000"\n       },\n       {\n         "public_key": "01524a5f3567d7b5ea17ca518c9d0320fb4a75a28a5eab58d06c755c388f20a19f",\n         "weight": "100000000"\n       },\n       {\n         "public_key": "01a6901408eda702a653805f50060bfe00d5e962747ee7133df64bd7bab50b4643",\n         "weight": "9000000000000000"\n       },\n       {\n         "public_key": "01d62fc9b894218bfbe8eebcc4a28a1fc4cb3a5c6120bb0027207ba8214439929e",\n         "weight": "10000000000000000"\n       }\n     ]\n   },\n   {\n     "era_id": 23,\n     "validator_weights": [\n       {\n         "public_key": "013f774a58f4d40bd9b6cce7e306e53646913860ef2a111d00f0fe7794010c4012",\n         "weight": "10000000000000000"\n       },\n       {\n         "public_key": "01405133e73ef2946fe3a2d76a4c75d305a04ad6b969f3c4a8a0d27235eb260f87",\n         "weight": "9000000000000000"\n       },\n       {\n         "public_key": "01524a5f3567d7b5ea17ca518c9d0320fb4a75a28a5eab58d06c755c388f20a19f",\n         "weight": "100000000"\n       },\n       {\n         "public_key": "01a6901408eda702a653805f50060bfe00d5e962747ee7133df64bd7bab50b4643",\n         "weight": "9000000000000000"\n       },\n       {\n         "public_key": "01d62fc9b894218bfbe8eebcc4a28a1fc4cb3a5c6120bb0027207ba8214439929e",\n         "weight": "10000000000000000"\n       }\n     ]\n   }\n ],\n "state_root_hash": "c16ba80ea200d786008f8100ea79f9cfeb8d7d5ee8b133eda5a50dcf1c7131e8"\n},\n"id": -3624528661787095850\n}\n'))),(0,i.kt)("br",null),(0,i.kt)("p",null,"Note the ",(0,i.kt)("inlineCode",{parentName:"p"},"era_id")," and the ",(0,i.kt)("inlineCode",{parentName:"p"},"validator_weights")," in the response above. The current era is the one with the lowest ID in the ",(0,i.kt)("inlineCode",{parentName:"p"},"era_validators")," array. For a given ",(0,i.kt)("inlineCode",{parentName:"p"},"era_id"),", a set of validators is defined. If the public key associated with a bid appears in the ",(0,i.kt)("inlineCode",{parentName:"p"},"validator_weights")," structure for an era, then the account is bonded in that era."),(0,i.kt)("h2",{id:"losing-bid"},"A Losing Bid"),(0,i.kt)("p",null,"If a bid doesn't win a slot in the auction, it is too low. The resolution is to increase the bid amount. It is possible to submit additional bids, to increase the odds of winning a slot. It is also possible to encourage token holders to delegate stake to you for bonding."),(0,i.kt)("h2",{id:"avoiding-ejection"},"Avoiding Ejection"),(0,i.kt)("p",null,"To stay bonded and avoid ejection, each validator must keep their node running and in sync with the rest of the network. To recover from ejection, you will find more details ",(0,i.kt)("a",{parentName:"p",href:"/docs/next/operators/becoming-a-validator/recovering"},"here"),"."),(0,i.kt)("h2",{id:"withdrawing-a-bid"},"Withdrawing a Bid"),(0,i.kt)("p",null,"Follow the steps in ",(0,i.kt)("a",{parentName:"p",href:"/docs/next/operators/becoming-a-validator/unbonding"},"Unbonding")," to withdraw a bid."))}u.isMDXComponent=!0}}]);