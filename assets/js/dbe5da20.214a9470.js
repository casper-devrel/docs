"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[1449],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return g}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),c=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=c(e.components);return a.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=c(n),h=r,g=u["".concat(p,".").concat(h)]||u[h]||d[h]||i;return n?a.createElement(g,o(o({ref:t},l),{},{components:n})):a.createElement(g,o({ref:t},l))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=h;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[u]="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},7085:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return p},default:function(){return g},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return u}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],s={},p="Signing Transactions",c={unversionedId:"developers/dapps/signing-a-transaction",id:"developers/dapps/signing-a-transaction",title:"Signing Transactions",description:"When creating a Transaction to be executed on a Casper network, the account owner, or more accurately, enough authorized signers must sign the transaction using their account's cryptographic key-pair. This key-pair is a combination of the account's secret and public keys. The signatures attached to the transaction allow the network to verify that it should be executed.",source:"@site/source/docs/casper/developers/dapps/signing-a-transaction.md",sourceDirName:"developers/dapps",slug:"/developers/dapps/signing-a-transaction",permalink:"/developers/dapps/signing-a-transaction",draft:!1,editUrl:"https://github.com/casper-network/docs/tree/dev/source/docs/casper/developers/dapps/signing-a-transaction.md",tags:[],version:"current",lastUpdatedAt:1714494013,formattedLastUpdatedAt:"Apr 30, 2024",frontMatter:{},sidebar:"developers",previous:{title:"URef Access Rights",permalink:"/developers/dapps/uref-security"},next:{title:"Estimating Gas Costs with Speculative Execution",permalink:"/developers/dapps/speculative-exec"}},l={},u=[{value:"Public Key Cryptography",id:"public-key-cryptography",level:2}],d={toc:u},h="wrapper";function g(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)(h,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"signing-transactions"},"Signing Transactions"),(0,i.kt)("p",null,"When creating a ",(0,i.kt)("a",{parentName:"p",href:"/concepts/glossary/T#transaction"},(0,i.kt)("inlineCode",{parentName:"a"},"Transaction"))," to be executed on a Casper network, the account owner, or more accurately, enough authorized signers must sign the transaction using their account's cryptographic key-pair. This key-pair is a combination of the account's secret and public keys. The signatures attached to the transaction allow the network to verify that it should be executed."),(0,i.kt)("p",null,"When a signature is attached to a transaction, it is paired with the public key of the signer, and referred to as an ",(0,i.kt)("a",{parentName:"p",href:"/concepts/serialization-standard#approval"},(0,i.kt)("inlineCode",{parentName:"a"},"Approval")),".  Every valid transaction has at least one approval."),(0,i.kt)("p",null,"The signature creation process begins with the hashing of the payment and session of the transaction to create the ",(0,i.kt)("inlineCode",{parentName:"p"},"BodyHash"),". The ",(0,i.kt)("inlineCode",{parentName:"p"},"BodyHash")," becomes a component of the ",(0,i.kt)("inlineCode",{parentName:"p"},"TransactionV1Header")," as outlined in the ",(0,i.kt)("a",{parentName:"p",href:"/concepts/serialization-standard"},"serialization standard"),". From there, the ",(0,i.kt)("inlineCode",{parentName:"p"},"TransactionV1Header")," can be hashed to create the ",(0,i.kt)("inlineCode",{parentName:"p"},"TransactionV1Hash"),". As outlined above, the ",(0,i.kt)("inlineCode",{parentName:"p"},"TransactionV1Hash")," is then combined with the account's key-pair to create the transaction's signature."),(0,i.kt)("p",null,"As the ",(0,i.kt)("inlineCode",{parentName:"p"},"TransactionV1Hash")," contains a hash of the transaction's body within, any variation to any aspect of the transaction or sending account's keys would render the ",(0,i.kt)("inlineCode",{parentName:"p"},"TransactionV1Hash")," invalid."),(0,i.kt)("h2",{id:"public-key-cryptography"},"Public Key Cryptography"),(0,i.kt)("p",null,"Casper networks are compatible with both ",(0,i.kt)("inlineCode",{parentName:"p"},"Ed25519")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Secp256k1")," public key cryptography. When ",(0,i.kt)("a",{parentName:"p",href:"/concepts/serialization-standard"},"serialized"),", public keys and signatures are prefixed with a single byte, used as a tag to denote the applicable algorithm. Ed25519 public keys and signatures are prefixed with ",(0,i.kt)("inlineCode",{parentName:"p"},"1"),", whereas Secp256k1 are prefixed with ",(0,i.kt)("inlineCode",{parentName:"p"},"2"),"."),(0,i.kt)("p",null,"Casper uses ",(0,i.kt)("inlineCode",{parentName:"p"},"blake2b")," hashing within our ",(0,i.kt)("a",{parentName:"p",href:"/concepts/serialization-standard"},"serialization"),". However, these hashed values will be hashed once again when they are signed over. The type of hashing depends on the associated keypair algorithm as follows:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Ed25519 signs over a SHA-512 digest.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Secp256k1 signs over a SHA-256 digest."))))}g.isMDXComponent=!0}}]);